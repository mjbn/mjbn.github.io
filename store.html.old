<!DOCTYPE html>
<html lang="en" x-data="storeApp()" x-init="loadCart()" x-bind:class="darkMode ? 'dark' : ''">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Store | TokyoNight</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
  <style>
    :root {
      --bg-dark: #1a1b26;
      --bg-light: #f5f5f5;
      --accent-blue: #7aa2f7;
      --accent-purple: #bb9af7;
      --accent-pink: #f7768e;
      --accent-green: #9ece6a;
      --text-dark: #c0caf5;
    }
  </style>
</head>
<body class="bg-[var(--bg-light)] dark:bg-[var(--bg-dark)] text-gray-800 dark:text-[var(--text-dark)] min-h-screen flex flex-col">

  <!-- Navbar -->
  <nav class="bg-white dark:bg-[#1f2335] shadow-md sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 py-3 flex justify-between items-center">
      <a href="index.html" class="text-xl font-bold text-[var(--accent-blue)]">TokyoNight</a>
      <div class="space-x-4 hidden md:flex items-center">
        <a href="store.html" class="hover:text-[var(--accent-pink)]">Store</a>
        <a href="blog.html" class="hover:text-[var(--accent-pink)]">Blog</a>
        <a href="novels.html" class="hover:text-[var(--accent-pink)]">Novels</a>
        <a href="about.html" class="hover:text-[var(--accent-pink)]">About</a>
        <!-- Cart Button -->
        <button @click="cartOpen = !cartOpen" class="relative px-3 py-1 bg-[var(--accent-blue)] text-white rounded-lg ml-4">
          üõí Cart
          <span x-text="cart.length" class="absolute -top-2 -right-2 bg-[var(--accent-pink)] text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"></span>
        </button>
        <!-- Dark Mode Toggle -->
        <button @click="darkMode = !darkMode" class="px-3 py-1 bg-[var(--accent-purple)] text-white rounded-lg ml-2">
          <span x-show="!darkMode">üåô Dark</span>
          <span x-show="darkMode">‚òÄÔ∏è Light</span>
        </button>
      </div>
    </div>
  </nav>

  <!-- Products Grid -->
  <section class="max-w-6xl mx-auto px-6 py-12 grid sm:grid-cols-2 md:grid-cols-3 gap-8">
    <template x-for="product in products" :key="product.id">
      <div class="bg-white dark:bg-[#24283b] p-4 rounded-xl shadow hover:shadow-lg">
        <img :src="product.image" :alt="product.name" class="rounded-lg mb-4">
        <h3 class="text-xl font-semibold text-[var(--accent-blue)]" x-text="product.name"></h3>
        <p class="text-sm mb-2" x-text="product.description"></p>
        <p class="font-bold mb-3" x-text="'$'+product.price.toFixed(2)"></p>
        <button @click="addToCart(product)" class="bg-[var(--accent-blue)] text-white px-4 py-2 rounded-lg w-full">Add to Cart</button>
      </div>
    </template>
  </section>

  <!-- Slide-in Cart Panel -->
  <div x-show="cartOpen" class="fixed top-0 right-0 w-80 h-full bg-white dark:bg-[#24283b] shadow-xl z-50 transition-transform transform" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="translate-x-full" x-transition:enter-end="translate-x-0" x-transition:leave="transition ease-in duration-300" x-transition:leave-start="translate-x-0" x-transition:leave-end="translate-x-full">
    <div class="p-6 flex flex-col h-full">
      <h2 class="text-2xl font-bold mb-4 text-[var(--accent-blue)]">üõí Your Cart</h2>
      <template x-if="cart.length === 0">
        <p class="text-gray-500">Your cart is empty.</p>
      </template>
      <template x-for="(item, index) in cart" :key="item.id">
        <div class="flex justify-between items-center mb-4">
          <div>
            <h3 class="font-semibold" x-text="item.name"></h3>
            <p class="text-sm text-gray-400" x-text="'$'+item.price.toFixed(2)"></p>
            <div class="flex items-center space-x-2 mt-1">
              <button @click="updateQuantity(index, -1)" class="px-2 py-1 bg-gray-300 dark:bg-gray-600 rounded">-</button>
              <span x-text="item.quantity"></span>
              <button @click="updateQuantity(index, 1)" class="px-2 py-1 bg-gray-300 dark:bg-gray-600 rounded">+</button>
            </div>
          </div>
          <button @click="removeFromCart(index)" class="text-[var(--accent-pink)] font-bold">√ó</button>
        </div>
      </template>
      <div class="mt-auto">
        <p class="font-bold text-lg mb-4">Total: $<span x-text="cartTotal().toFixed(2)"></span></p>
        <a href="cart.html" class="block text-center bg-[var(--accent-pink)] text-white px-4 py-2 rounded-lg">View Cart & Checkout</a>
        <button @click="cartOpen = false" class="mt-2 w-full text-center bg-gray-300 dark:bg-gray-600 px-4 py-2 rounded-lg">Close</button>
      </div>
    </div>
  </div>

  <footer class="bg-white dark:bg-[#1f2335] text-center py-4 mt-auto">
    <p>&copy; 2025 TokyoNight. All rights reserved.</p>
  </footer>

  <!-- Alpine.js Store Logic -->
  <script>
    function storeApp() {
      return {
        darkMode: true,
        cartOpen: false,
        products: [
          {id: 1, name: 'Neon Hoodie', description: 'Soft cotton hoodie inspired by Shibuya nights.', price: 49.99, image: 'https://via.placeholder.com/300x200', quantity: 1},
          {id: 2, name: 'Tokyo Mug', description: 'Enjoy your coffee in neon style.', price: 14.99, image: 'https://via.placeholder.com/300x200', quantity: 1},
          {id: 3, name: 'City Lights Poster', description: 'Bring Tokyo‚Äôs glow to your room.', price: 19.99, image: 'https://via.placeholder.com/300x200', quantity: 1}
        ],
        cart: [],
        loadCart() {
          let stored = localStorage.getItem('cart');
          if(stored) this.cart = JSON.parse(stored);
        },
        saveCart() {
          localStorage.setItem('cart', JSON.stringify(this.cart));
        },
        addToCart(product) {
          let item = this.cart.find(i => i.id === product.id);
          if(item) item.quantity++;
          else this.cart.push({...product});
          this.saveCart();
        },
        removeFromCart(index) {
          this.cart.splice(index, 1);
          this.saveCart();
        },
        updateQuantity(index, delta) {
          let item = this.cart[index];
          item.quantity += delta;
          if(item.quantity < 1) this.cart.splice(index, 1);
          this.saveCart();
        },
        cartTotal() {
          return this.cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
        }
      }
    }
  </script>
</body>
</html>
